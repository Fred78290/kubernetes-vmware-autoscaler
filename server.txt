kubeClientset         kubernetes.Interface
nodeManagerClientset  clientset.Interface
apiextensionClientset apiextension.Interface


func (s *AutoScalerServerApp) removeDeletedManagedNodes(crds map[uid.UID]*v1alpha1.ManagedNode) {
	for _, ng := range s.Groups {
		for _, node := range ng.Nodes {
			if node.ManagedNode {
				if _, found := crds[node.UID]; !found {
					if err := ng.deleteNode(s.kubeClient, node); err != nil {
						glog.Errorf("unable to delete managed node: %s in group, error: %v", node.NodeName, err)
					}
				}
			}
		}
	}
}

func (s *AutoScalerServerApp) startManagedNodes(clientSet client_v1alpha1.ManagedNodeInterface, crdUID map[uid.UID]*v1alpha1.ManagedNode, creationNodes map[string][]*AutoScalerServerNode) {
	for nodeGroupName, nodesList := range creationNodes {
		if nodeGroup, found := s.Groups[nodeGroupName]; found {
			nodeGroup.createNodes(s.kubeClient, nodesList)

			for _, node := range nodesList {
				crd := crdUID[node.UID]
				ctx := utils.NewRequestContext(s.requestTimeout)

				defer ctx.Cancel()

				if node.State == AutoScalerServerNodeStateRunning {
					crd.Status.Code = v1alpha1.StatusManagedNodeCreated
					crd.Status.Reason = v1alpha1.StatusManagedNodeReason(v1alpha1.StatusManagedNodeCreated)
					crd.Status.Message = fmt.Sprintf("Node %s creation successful", node.NodeName)
					crd.Spec.NodeName = node.NodeName

					if _, err := clientSet.Update(ctx, crd, metav1.UpdateOptions{}); err != nil {
						glog.Errorf("update crd %v failed, reason: %v", crd, err)
					}
				} else {
					crd.Status.Code = v1alpha1.StatusManagedNodeCreationFailed
					crd.Status.Reason = v1alpha1.StatusManagedNodeReason(v1alpha1.StatusManagedNodeCreationFailed)
					crd.Status.Message = fmt.Sprintf("Node %s creation failed", node.NodeName)
				}

				if _, err := clientSet.UpdateStatus(ctx, crd, metav1.UpdateOptions{}); err != nil {
					glog.Errorf("update crd %v failed, reason: %v", crd, err)
				}
			}
		}
	}
}

func (s *AutoScalerServerApp) createManagedNodesFromCRD(clientSet client_v1alpha1.ManagedNodeInterface, store cache.Store) (map[uid.UID]*v1alpha1.ManagedNode, map[string][]*AutoScalerServerNode) {
	managedNodeFromStore := store.List()
	crdUID := make(map[uid.UID]*v1alpha1.ManagedNode)
	creationNodes := make(map[string][]*AutoScalerServerNode)

	if len(managedNodeFromStore) > 0 {
		for _, obj := range managedNodeFromStore {
			if crd, ok := obj.(*v1alpha1.ManagedNode); ok {
				crdUID[crd.GetUID()] = crd

				if nodeGroup, found := s.Groups[crd.Spec.NodeGroup]; found {
					if _, err := nodeGroup.findNodeByUID(crd.GetUID()); err != nil {
						oldStatus := crd.Status.Code

						if oldStatus == v1alpha1.StatusManagedNodeCreation || oldStatus == v1alpha1.StatusManagedNodeGroupNotFound {
							// Create managedNode
							if node, err := nodeGroup.addManagedNode(crd); err == nil {
								var nodesListByNodegroup []*AutoScalerServerNode

								if nodesListByNodegroup, found = creationNodes[crd.Spec.NodeGroup]; !found {
									nodesListByNodegroup = make([]*AutoScalerServerNode, 0, 5)
									nodesListByNodegroup = append(nodesListByNodegroup, node)
								} else {
									nodesListByNodegroup = append(nodesListByNodegroup, node)
								}

								creationNodes[crd.Spec.NodeGroup] = nodesListByNodegroup

								crd.Spec.NodeName = node.NodeName

								crd.Status.Code = v1alpha1.StatusManagedNodeCreation
								crd.Status.Reason = v1alpha1.StatusManagedNodeReason(v1alpha1.StatusManagedNodeCreation)
								crd.Status.Message = fmt.Sprintf("Node %s in creation", node.NodeName)
							} else {
								crd.Status.Code = v1alpha1.StatusManagedNodeCreationFailed
								crd.Status.Message = err.Error()
								crd.Status.Reason = v1alpha1.StatusManagedNodeReason(v1alpha1.StatusManagedNodeCreationFailed)
							}
						} else if crd.Status.Code == v1alpha1.StatusManagedNodeCreated {
							crd.Status.Code = v1alpha1.StatusManagedNodeDeleted
							crd.Status.Message = fmt.Sprintf("the node %s is deleted", crd.Spec.NodeName)
							crd.Status.Reason = v1alpha1.StatusManagedNodeReason(v1alpha1.StatusManagedNodeDeleted)
						}

						if oldStatus != crd.Status.Code {
							ctx := utils.NewRequestContext(s.requestTimeout)

							defer ctx.Cancel()

							if _, err := clientSet.UpdateStatus(ctx, crd, metav1.UpdateOptions{}); err != nil {
								glog.Errorf("update crd %v failed, reason: %v", managedNodeFromStore, err)
							}
						}
					}
				} else if crd.Status.Code == v1alpha1.StatusManagedNodeNeedToCreated {
					glog.Errorf(constantes.ErrNodeGroupNotFound, crd.Spec.NodeGroup)

					ctx := utils.NewRequestContext(s.requestTimeout)

					defer ctx.Cancel()

					crd.Status.Code = v1alpha1.StatusManagedNodeGroupNotFound
					crd.Status.Message = fmt.Sprintf(constantes.ErrNodeGroupNotFound, crd.Spec.NodeGroup)
					crd.Status.Reason = v1alpha1.StatusManagedNodeReason(int(crd.Status.Code))

					if _, err := clientSet.UpdateStatus(ctx, crd, metav1.UpdateOptions{}); err != nil {
						glog.Errorf("update crd %v failed, reason: %v", managedNodeFromStore, err)
					}
				}
			}
		}
	}

	return crdUID, creationNodes
}

func (s *AutoScalerServerApp) watchResources() {
	clientSet, store := s.kubeClient.WatchResources()

	go func() {
		for s.running {
			crdUID, creationNodes := s.createManagedNodesFromCRD(clientSet, store)

			if len(crdUID)+len(creationNodes) > 0 {
				s.startManagedNodes(clientSet, crdUID, creationNodes)
				s.removeDeletedManagedNodes(crdUID)

				store.Resync()
			}

			time.Sleep(2 * time.Second)
		}
	}()
}
